import express from 'express';
import cron from 'node-cron';
import { fileURLToPath } from 'url';
import path from 'path';
import { logger } from './src/utils/logger.js';
import { createProcessLock, isProcessLocked, setupProcessLockCleanup } from './src/utils/procLock.js';
import { runFullScraping } from './src/index.js';
import { isScraperRunning } from './src/utils/lockFile.js';
import { getMilanDateTime } from './src/utils/timezone.js';
import { getAllLimitCodes } from './src/config/limits.js';
import ScrapingLogger from './src/database/scrapingLogger.js';
import { sendTelegramMessage } from './src/utils/telegram.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ScrapingLogger
const scrapingLogger = new ScrapingLogger();

// Middleware
app.use(express.json());
app.use(express.static('public'));

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let lastScrapingTime = null;
let lastScrapingResult = null;
let isCurrentlyRunning = false;
let scrapingStats = {
    totalRuns: 0,
    successfulRuns: 0,
    failedRuns: 0,
    lastError: null
};

// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
const serverStartTime = new Date().toISOString();
const serverLocation = {
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    country: 'Unknown'
};

// Main route for monitoring interface
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Management panel route
app.get('/public/index.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API Routes
app.get('/api/status', (req, res) => {
    const now = new Date();
    const startTime = new Date(serverStartTime);
    const uptimeMs = now.getTime() - startTime.getTime();
    
    res.json({
        status: 'running',
        server: 'Winamax Analytics Scraper',
        time: now.toISOString(),
        milanTime: getMilanDateTime(),
        isScrapingRunning: isCurrentlyRunning,
        lastScrapingTime,
        lastScrapingResult,
        stats: scrapingStats,
        serverStartTime: serverStartTime,
        uptime: uptimeMs,
        location: serverLocation
    });
});

function buildServerStatusMessage() {
    const now = new Date();
    const startTime = new Date(serverStartTime);
    const uptimeMinutes = Math.floor((now - startTime) / (1000 * 60));
    const memMb = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
    return [
        'üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (fallback)',
        '',
        `üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: Winamax Analytics`,
        `‚è±Ô∏è –ê–ø—Ç–∞–π–º: ${Math.floor(uptimeMinutes/60)}—á ${uptimeMinutes%60}–º`,
        `üíæ –ü–∞–º—è—Ç—å: ${memMb} MB`,
        `‚è∞ –í—Ä–µ–º—è: ${now.toISOString()}`
    ].join('\n');
}

app.get('/api/scraping/status', (req, res) => {
    res.json({
        isRunning: isCurrentlyRunning,
        lastRun: lastScrapingTime,
        lastResult: lastScrapingResult,
        stats: scrapingStats
    });
});

app.post('/api/scraping/start', async (req, res) => {
    if (isCurrentlyRunning) {
        return res.status(409).json({
            error: '–°–∫—Ä–∞–ø–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            isRunning: true
        });
    }

    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        runScrapingTask();
        
        res.json({
            message: '–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω',
            startTime: new Date().toISOString()
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞',
            details: error.message
        });
    }
});

app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤ —Å–∫—Ä–∞–ø–µ—Ä–∞
app.get('/api/scraping/history', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 150;
        const logs = await scrapingLogger.getRecentLogs(limit * 3); // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–∏–º –∑–∞–ø—É—Å–∫–æ–º)
        const groupedRuns = [];
        const processedTimes = new Set();
        
        // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        const allLimits = getAllLimitCodes();
        
        for (const log of logs) {
            const logTime = new Date(log.scraping_datetime + 'Z').getTime();
            const timeKey = Math.floor(logTime / (2 * 60 * 1000)); // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
            
            if (processedTimes.has(timeKey)) {
                continue;
            }
            
            processedTimes.add(timeKey);
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
            const runLogs = logs.filter(l => {
                const lTime = new Date(l.scraping_datetime + 'Z').getTime();
                return Math.abs(lTime - logTime) <= 2 * 60 * 1000; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç
            });
            
            if (runLogs.length === 0) continue;
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞
            const run = {
                startTime: new Date(Math.min(...runLogs.map(l => new Date(l.scraping_datetime + 'Z').getTime()))),
                limits: {},
                totalFound: 0,
                totalSaved: 0,
                success: runLogs.every(l => l.database_success),
                duration: Math.max(...runLogs.map(l => l.execution_time_ms || 0)),
                logId: log.id
            };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã
            allLimits.forEach(limit => {
                run.limits[limit] = {
                    processed: false,
                    found: 0,
                    saved: 0,
                    success: false
                };
            });
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º
            runLogs.forEach(log => {
                const limitValue = log.limit_value;
                if (run.limits[limitValue]) {
                    run.limits[limitValue] = {
                        processed: true,
                        found: log.players_found || 0,
                        saved: log.players_saved || 0,
                        success: log.database_success || false
                    };
                    run.totalFound += log.players_found || 0;
                    run.totalSaved += log.players_saved || 0;
                }
            });
            
            groupedRuns.push(run);
            
            if (groupedRuns.length >= limit) {
                break;
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        groupedRuns.sort((a, b) => b.logId - a.logId);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —É—Å–ø–µ—à–Ω—ã–º–∏ –∑–∞–ø—É—Å–∫–∞–º–∏
        let lastSuccessfulTime = null;
        groupedRuns.forEach(run => {
            if (run.success && lastSuccessfulTime) {
                const intervalMinutes = Math.floor((lastSuccessfulTime - new Date(run.startTime)) / (1000 * 60));
                run.intervalFromPrevious = intervalMinutes;
                run.isDelayed = intervalMinutes > 10; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –µ—Å–ª–∏ > 10 –º–∏–Ω—É—Ç
            } else {
                run.intervalFromPrevious = null;
                run.isDelayed = false;
            }
            
            if (run.success) {
                lastSuccessfulTime = new Date(run.startTime);
            }
        });
        
        res.json({
            runs: groupedRuns.slice(0, limit),
            total: groupedRuns.length,
            allLimits: allLimits
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤',
            details: error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
    try {
        const connection = await scrapingLogger.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        const [playerStats] = await connection.execute(`
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT player_name) as unique_players,
                MIN(scraped_at) as first_record_date,
                MAX(scraped_at) as last_record_date
            FROM tournament_snapshots
        `);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–æ–≤ —Å–∫—Ä–∞–ø–µ—Ä–∞
        const [scrapingStats] = await connection.execute(`
            SELECT 
                COUNT(*) as total_scraping_runs,
                COUNT(CASE WHEN database_success = 1 THEN 1 END) as successful_runs,
                COUNT(CASE WHEN database_success = 0 THEN 1 END) as failed_runs,
                MIN(scraping_datetime) as first_scraping_date,
                MAX(scraping_datetime) as last_scraping_date,
                SUM(players_found) as total_players_found,
                SUM(players_saved) as total_players_saved
            FROM scraping_logs
        `);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∏–º–∏—Ç–∞–º
        const [limitStats] = await connection.execute(`
            SELECT 
                limit_value,
                COUNT(*) as runs_count,
                SUM(players_found) as total_found,
                SUM(players_saved) as total_saved,
                COUNT(CASE WHEN database_success = 1 THEN 1 END) as successful_runs
            FROM scraping_logs 
            GROUP BY limit_value
            ORDER BY 
                CASE 
                    WHEN limit_value = '0.25' THEN 1
                    WHEN limit_value = '0.5' THEN 2
                    WHEN limit_value = '1-1.5' THEN 3
                    WHEN limit_value = '2-3' THEN 4
                    WHEN limit_value = '4-7' THEN 5
                    WHEN limit_value = '8-15' THEN 6
                    WHEN limit_value = '16-25' THEN 7
                    WHEN limit_value = '50' THEN 8
                    WHEN limit_value = '100' THEN 9
                    WHEN limit_value = '250' THEN 10
                    WHEN limit_value = '500' THEN 11
                    ELSE 12
                END
        `);
        
        res.json({
            playerData: playerStats[0] || {},
            scrapingRuns: scrapingStats[0] || {},
            limitBreakdown: limitStats || []
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            details: error.message
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
async function runScrapingTask() {
    if (isCurrentlyRunning) {
        logger.warn('–°–∫—Ä–∞–ø–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª
    if (await isScraperRunning()) {
        logger.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω lock —Ñ–∞–π–ª, —Å–∫—Ä–∞–ø–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
        return;
    }

    isCurrentlyRunning = true;
    lastScrapingTime = new Date().toISOString();
    scrapingStats.totalRuns++;

    const startTimeUTC = new Date().toISOString();
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
    logger.info(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (UTC): ${startTimeUTC}`);
    logger.info(`üáÆüáπ –í—Ä–µ–º—è –ú–∏–ª–∞–Ω–∞: ${getMilanDateTime()}`);

    try {
        const result = await runFullScraping();

        if (result && result.success === false) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏–≥—Ä–æ–∫–æ–≤)
            lastScrapingResult = {
                success: false,
                timestamp: new Date().toISOString(),
                error: result.error || '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π',
                result: result
            };
            scrapingStats.failedRuns++;
            scrapingStats.lastError = {
                message: result.error || '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π',
                timestamp: new Date().toISOString()
            };
            logger.error(`‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: ${result.error || 'unknown'}`);
        } else {
            lastScrapingResult = {
                success: true,
                timestamp: new Date().toISOString(),
                message: '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                result: result
            };
            scrapingStats.successfulRuns++;
            scrapingStats.lastError = null;
            logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        
        lastScrapingResult = {
            success: false,
            timestamp: new Date().toISOString(),
            error: error.message,
            stack: error.stack
        };
        
        scrapingStats.failedRuns++;
        scrapingStats.lastError = {
            message: error.message,
            timestamp: new Date().toISOString()
        };
    } finally {
        isCurrentlyRunning = false;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á
function setupCronJobs() {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ .env —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)
    const intervalMinutes = parseInt(process.env.SCRAPING_INTERVAL_MINUTES) || 10;
    
    // –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const cronExpression = `*/${intervalMinutes} * * * *`;
    
    cron.schedule(cronExpression, () => {
        logger.info(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç)`);
        runScrapingTask();
    });

    logger.info(`üìÖ Cron –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç`);

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: —á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø—Ä—è–º–æ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (fallback –∫ –±–æ—Ç—É)
    const statusHours = parseInt(process.env.TELEGRAM_STATUS_INTERVAL_HOURS) || 8;
    const statusCron = `0 */${statusHours} * * *`;
    cron.schedule(statusCron, async () => {
        try {
            const msg = buildServerStatusMessage();
            await sendTelegramMessage(msg);
            logger.info('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä (fallback)');
        } catch (e) {
            logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä:', e.message);
        }
    }, { timezone: 'Europe/Rome' });
    logger.info(`üìÖ Cron —Å—Ç–∞—Ç—É—Å (fallback) –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–∞–∂–¥—ã–µ ${statusHours} —á–∞—Å–æ–≤`);
}

// –û–¥–Ω–æ—ç–∫–∑–µ–º–ø–ª—è—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (isProcessLocked('scraper-server')) {
    logger.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (lock scraper-server). –í—ã—Ö–æ–¥–∏–º.');
    process.exit(1);
}
createProcessLock('scraper-server');
setupProcessLockCleanup('scraper-server');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    logger.info(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    logger.info(`üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/`);
    logger.info(`üîó –°—Ç–∞—Ç—É—Å: http://localhost:${PORT}/api/status`);
    logger.info(`‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toISOString()}`);
    logger.info(`üáÆüáπ –í—Ä–µ–º—è –ú–∏–ª–∞–Ω–∞: ${getMilanDateTime()}`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä
    setupCronJobs();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => {
        logger.info('üéØ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
        runScrapingTask();
    }, 30000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

process.on('SIGINT', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

export default app; 