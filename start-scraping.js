import cron from 'node-cron';
import { WinamaxScraper } from './src/scrapers/winamaxScraper.js';
import { MySQLService } from './src/database/mysql.js';
import { logger } from './src/utils/logger.js';
import { createLockFile, removeLockFile, setupLockFileCleanup, isScraperRunning } from './src/utils/lockFile.js';
import { getTimezoneInfo } from './src/utils/timezone.js';

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Winamax Expresso');
console.log('‚è∞ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
console.log('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', process.env.TIMEZONE || 'Europe/Rome');
console.log('üìä –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: npm start scraping-logs recent');
console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C');
console.log('‚îÄ'.repeat(60));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∞–ø–µ—Ä
const preventParallel = process.env.PREVENT_PARALLEL_RUNS === 'true';
if (preventParallel && isScraperRunning()) {
    console.log('‚ùå –°–∫—Ä–∞–ø–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å.');
    console.log('üí° –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª scraper.lock');
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
if (preventParallel && !createLockFile()) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock —Ñ–∞–π–ª');
    process.exit(1);
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É lock —Ñ–∞–π–ª–∞
setupLockFileCleanup();

let isRunning = false;

async function runScraping() {
    if (isRunning) {
        logger.warn('[SCHEDULER] –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–±–æ—Ä –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
    }

    isRunning = true;
    const startTime = Date.now();
    
    try {
        const timezoneInfo = getTimezoneInfo();
        const startTimeUTC = new Date().toISOString();
        logger.info(`[SCHEDULER] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö`);
        logger.info(`[SCHEDULER] ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (UTC): ${startTimeUTC}`);
        logger.info(`[SCHEDULER] üáÆüáπ –í—Ä–µ–º—è –ú–∏–ª–∞–Ω–∞: ${timezoneInfo.currentTime}`);
        
        const scraper = new WinamaxScraper();
        const database = new MySQLService();
        
        await scraper.initialize();
        await database.connect();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –ú–∏–ª–∞–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await database.addMilanDateColumn();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        const limitsConfig = scraper.getActiveLimitsConfig();
        const activeLimits = Object.keys(limitsConfig).filter(limit => limitsConfig[limit].active);
        
        if (activeLimits.length === 0) {
            logger.warn('[SCHEDULER] ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞');
            return;
        }
        
        logger.info(`[SCHEDULER] üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${activeLimits.length} –ª–∏–º–∏—Ç–æ–≤: ${activeLimits.join(', ')}`);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const scrapingResult = await scraper.scrapeAllLimits(limitsConfig);
        const { players: playersData, scrapingResults } = scrapingResult;
        
        if (playersData.length === 0) {
            logger.warn('[SCHEDULER] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–º–∏—Ç–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const dataByLimit = {};
        playersData.forEach(player => {
            if (!dataByLimit[player.limit]) {
                dataByLimit[player.limit] = [];
            }
            dataByLimit[player.limit].push({
                tournament_limit: player.limit,
                rank: player.rank,
                player_name: player.name,
                points: player.points,
                guarantee: player.guarantee,
                scraped_at: player.scraped_at || new Date().toISOString()
            });
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏–º–∏—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        const dbResults = {};
        let totalInserted = 0;
        
        for (const [limitName, limitData] of Object.entries(dataByLimit)) {
            try {
                const result = await database.insertTournamentSnapshot(limitData);
                dbResults[limitName] = result;
                totalInserted += result.insertedCount;
            } catch (error) {
                logger.error(`[SCHEDULER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ ${limitName}:`, error);
                dbResults[limitName] = {
                    success: false,
                    insertedCount: 0,
                    error: error.message
                };
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        await scraper.logScrapingResults(scrapingResults, dbResults);
        
        const executionTime = Date.now() - startTime;
        logger.info(`[SCHEDULER] ‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: ${totalInserted} –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞ ${executionTime}–º—Å`);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ –ø–æ–ª—É–Ω–æ—á–∏
        if (timezoneInfo.isNearMidnight) {
            logger.warn('[SCHEDULER] ‚ö†Ô∏è –ë–ª–∏–∑–∫–æ –∫ –ø–æ–ª—É–Ω–æ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–∏–ª–∞–Ω–∞ - –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ —É –∏–≥—Ä–æ–∫–æ–≤');
        }
        
        await scraper.close();
        await database.close();
        
    } catch (error) {
        const executionTime = Date.now() - startTime;
        logger.error(`[SCHEDULER] ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (${executionTime}–º—Å):`, error);
    } finally {
        isRunning = false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
console.log('üî• –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...');
runScraping();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
const interval = process.env.SCRAPING_INTERVAL_MINUTES || 10;
cron.schedule(`*/${interval} * * * *`, () => {
    const timezoneInfo = getTimezoneInfo();
    console.log(`\n‚è∞ [${timezoneInfo.currentTime}] –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...`);
    runScraping();
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: npm start scraping-logs recent');
    if (preventParallel) {
        removeLockFile();
    }
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    if (preventParallel) {
        removeLockFile();
    }
    process.exit(0);
}); 