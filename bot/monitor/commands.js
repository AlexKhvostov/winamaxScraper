/**
 * –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É):
 *
 * /start           ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
 * /status          ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã, —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∏ watchdog
 * /restart         ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (—á–µ—Ä–µ–∑ PM2 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ)
 * /restartlocal    ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (kill + spawn node server.js)
 * /restartwatchdog ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ watchdog
 * /logs            ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤ + —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ combined.log –∏ error.log
 * /clearlogs       ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ combined.log –∏ error.log
 * /help            ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 */

import { logger } from '../../src/utils/logger.js';
import { clearLogs, buildLogsSizeText, getRecentLogsText } from './logs.js';

export function setupCommands(monitor) {
  const isAdmin = (ctx) => ctx.from.id.toString() === monitor.chatId;

  monitor.bot.command('start', (ctx) => {
    if (!isAdmin(ctx)) return;
    ctx.reply('üöÄ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞\n/logs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n/help - –ø–æ–º–æ—â—å');
  });

  monitor.bot.command('status', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞');
    const stats = await monitor.getServerStats();
    const message = monitor.formatStatusMessage(stats);
    const sizes = buildLogsSizeText();
    ctx.reply(`${message}\n\n${sizes}`);
  });

  monitor.bot.command('restart', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    ctx.reply('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    await monitor.restartMainServer();
  });

  monitor.bot.command('restartlocal', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫');
    ctx.reply('üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    await monitor.restartLocalServer();
  });

  monitor.bot.command('logs', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏');
    const logs = await getRecentLogsText();
    const sizes = buildLogsSizeText();
    ctx.reply(`${sizes}\n\n${logs}`);
  });

  monitor.bot.command('restartwatchdog', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ watchdog');
    await monitor.restartWatchdog(ctx);
  });

  monitor.bot.command('help', (ctx) => {
    if (!isAdmin(ctx)) return;
    ctx.reply('ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞\n/restartlocal - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/restartwatchdog - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ watchdog\n/logs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n/clearlogs - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞');
  });

  monitor.bot.command('clearlogs', async (ctx) => {
    if (!isAdmin(ctx)) return;
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ');
    const ok = await clearLogs();
    if (ok) {
      ctx.reply('üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã: combined.log –∏ error.log');
    } else {
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏');
    }
  });
}


