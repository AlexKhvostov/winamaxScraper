import { logger } from '../../src/utils/logger.js';
import { checkServerRunning, getServerStartTime } from './processService.js';

export function startMonitoring(monitor) {
  monitor.monitoringInterval = setInterval(async () => {
    await checkSystemStatus(monitor);
  }, monitor.monitoringIntervalMinutes * 60 * 1000);
  logger.info(`üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ ${monitor.monitoringIntervalMinutes} –º–∏–Ω—É—Ç`);
}

export async function checkSystemStatus(monitor) {
  try {
    logger.debug('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...');

    const isServerRunning = await checkServerRunning();
    const isDbConnected = await monitor.checkDatabaseConnection();

    if (monitor.lastServerStatus !== null && monitor.lastServerStatus !== isServerRunning) {
      if (isServerRunning) {
        monitor.serverStartTime = new Date();
        await monitor.sendMessage('‚úÖ **–°–µ—Ä–≤–µ—Ä —Å–∫—Ä–∞–ø–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\nüöÄ –°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è∞ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ' + monitor.serverStartTime.toLocaleString('ru-RU', { timeZone: 'Europe/Rome' }));
        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        monitor.serverStartTime = null;
        await monitor.sendMessage('üö® **–í–ù–ò–ú–ê–ù–ò–ï: –°–µ—Ä–≤–µ—Ä —Å–∫—Ä–∞–ø–µ—Ä–∞ —É–ø–∞–ª!**\n\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n‚è∞ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Rome' }));
        logger.warn('üö® –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    }

    if (isServerRunning && !monitor.serverStartTime) {
      const realStartTime = await getServerStartTime();
      monitor.serverStartTime = realStartTime || new Date();
    }

    if (monitor.lastDbStatus !== null && monitor.lastDbStatus !== isDbConnected) {
      if (isDbConnected) {
        await monitor.sendMessage('‚úÖ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\nüóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        await monitor.sendMessage('üö® **–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î!**\n\n‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n‚è∞ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Rome' }));
      }
    }

    await checkScrapingErrors(monitor);

    monitor.lastServerStatus = isServerRunning;
    monitor.lastDbStatus = isDbConnected;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
  }
}

export async function checkScrapingErrors(monitor) {
  try {
    if (!monitor.mysqlPool) return;

    const [recentLogs] = await monitor.mysqlPool.execute(`
      SELECT * FROM scraping_logs 
      ORDER BY created_at DESC 
      LIMIT 3
    `);

    if (recentLogs.length === 0) return;

    const lastLog = recentLogs[0];
    const logTime = new Date(lastLog.created_at);
    const now = new Date();
    const diffMinutes = (now - logTime) / (1000 * 60);

    if (diffMinutes > 15) {
      if (!monitor.lastScrapingCheck || (now - monitor.lastScrapingCheck) > 30 * 60 * 1000) {
        await monitor.sendMessage(`‚ö†Ô∏è **–°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è**\n\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${Math.round(diffMinutes)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥\nüìÖ –í—Ä–µ–º—è: ${logTime.toLocaleString('ru-RU', { timeZone: 'Europe/Rome' })}`);
        monitor.lastScrapingCheck = now;
      }
    }

    if (lastLog.players_found === 0 && lastLog.database_success === 1) {
      const errorTime = logTime.toLocaleString('ru-RU', { timeZone: 'Europe/Rome' });
      await monitor.sendMessage(`‚ö†Ô∏è **–°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–∞—à–µ–ª 0 –∏–≥—Ä–æ–∫–æ–≤**\n\nüéØ –õ–∏–º–∏—Ç: ${lastLog.limit_value}\n‚è∞ –í—Ä–µ–º—è: ${errorTime}\n\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏`);
      logger.warn(`‚ö†Ô∏è –°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–∞—à–µ–ª 0 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞ ${lastLog.limit_value}`);
    }

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:', error);
  }
}


