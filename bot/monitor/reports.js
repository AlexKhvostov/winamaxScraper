import { logger } from '../../src/utils/logger.js';
import { sendMessage } from './messaging.js';
import { buildLogsSizeText } from './logs.js';

export async function sendServerStatus(monitor) {
  try {
    const stats = await monitor.getServerStats();
    const message = monitor.formatStatusMessage(stats);
    const logsText = buildLogsSizeText();
    await sendMessage(monitor.bot, monitor.chatId, `${message}\n\n${logsText}`);
    logger.info('‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    await sendMessage(monitor.bot, monitor.chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

export async function sendDailyReport(monitor) {
  try {
    const stats = await monitor.getServerStats();
    const scraping = stats.scrapingStats || {};
    const successRate = scraping.totalRuns > 0 ? ((scraping.successfulRuns / scraping.totalRuns) * 100).toFixed(1) : '0';
    const report = `üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - ${new Date().toLocaleDateString('ru-RU', { timeZone: 'Europe/Rome' })}**

üöÄ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –°–µ—Ä–≤–µ—Ä: ${stats.serverRunning ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.dbConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∏–∑ API):**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${scraping.totalRuns || 0}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${scraping.successfulRuns || 0}
‚Ä¢ –û—à–∏–±–æ–∫: ${scraping.failedRuns || 0}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${scraping.lastError || '–ù–µ—Ç'}

‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Rome' })}`;
    const logsText = buildLogsSizeText();
    await sendMessage(monitor.bot, monitor.chatId, `${report}\n\n${logsText}`);
    logger.info('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    await sendMessage(monitor.bot, monitor.chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');
  }
}


