import cron from 'node-cron';
import { logger } from '../../src/utils/logger.js';
import { clearLogs } from './logs.js';

export function setupSchedules(monitor) {
  // –ï–ñ–ï–ß–ê–°–ù–´–ô –°–¢–ê–¢–£–° –ü–ï–†–ï–ù–ï–°–ï–ù –ù–ê –°–ï–†–í–ï–† (fallback).
  // –í –±–æ—Ç–µ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
  cron.schedule(`0 ${monitor.dailyReportHour} * * *`, async () => {
    logger.info(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ ${monitor.dailyReportHour}:00 –ø–æ –ú–∏–ª–∞–Ω—É`);
    await monitor.sendDailyReport();
  }, { timezone: 'Europe/Rome' });

  // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ CRON (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
  if (process.env.LOGS_AUTO_CLEAR_CRON) {
    const expr = process.env.LOGS_AUTO_CLEAR_CRON;
    logger.info(`üßπ –í–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: ${expr}`);
    cron.schedule(expr, async () => {
      logger.info('üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
      await clearLogs();
    }, { timezone: 'Europe/Rome' });
  } else if (process.env.LOGS_AUTO_CLEAR_HOUR) {
    const hour = parseInt(process.env.LOGS_AUTO_CLEAR_HOUR, 10);
    if (!Number.isNaN(hour) && hour >= 0 && hour <= 23) {
      const expr = `0 ${hour} * * *`;
      logger.info(`üßπ –í–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ —á–∞—Å—É: ${hour}:00 (cron: ${expr})`);
      cron.schedule(expr, async () => {
        logger.info('üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (hour)');
        await clearLogs();
      }, { timezone: 'Europe/Rome' });
    } else {
      logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ LOGS_AUTO_CLEAR_HOUR, –æ–∂–∏–¥–∞–µ—Ç—Å—è 0-23');
    }
  }
}


