import { Telegraf } from 'telegraf';
import { logger } from '../src/utils/logger.js';
import { config } from '../src/config/config.js';
import { exec } from 'child_process';
import { setupSchedules } from './monitor/schedules.js';
import { createProcessLock, isProcessLocked, setupProcessLockCleanup } from '../src/utils/procLock.js';
import { setupCommands as setupCommandsModule } from './monitor/commands.js';
import { formatStatusMessage as formatStatusMessageModule } from './monitor/functions.js';
import { getServerStatusFromAPI as apiGetServerStatus, getWatchdogStatusFromAPI as apiGetWatchdogStatus } from './monitor/apiClient.js';
import { createPool, checkDatabaseConnection as dbCheckConnection } from './monitor/db.js';
import { restartLocalServer as psRestartLocal, restartWatchdog as psRestartWatchdog, checkServerRunning as psCheckServerRunning, getServerStartTime as psGetServerStartTime } from './monitor/processService.js';
import { startMonitoring as hmStartMonitoring } from './monitor/healthMonitor.js';
import { sendServerStatus as rptSendStatus, sendDailyReport as rptSendDaily } from './monitor/reports.js';

class TelegramMonitor {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.botToken = process.env.TELEGRAM_BOT_TOKEN || '7967034577:AAGhXcdE6ghSvFq_fjSY5oFw-lGJBmb-muE';
        this.chatId = process.env.TELEGRAM_CHAT_ID || '287536885';
        this.statusIntervalHours = parseInt(process.env.TELEGRAM_STATUS_INTERVAL_HOURS) || 8;
        this.monitoringIntervalMinutes = parseInt(process.env.TELEGRAM_MONITORING_INTERVAL_MINUTES) || 3;
        this.dailyReportHour = parseInt(process.env.TELEGRAM_DAILY_REPORT_HOUR) || 10;
        this.bot = null;
        this.mysqlPool = null;
        this.lastStatusSentAt = 0; // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.lastServerStatus = null; // null, true (—Ä–∞–±–æ—Ç–∞–µ—Ç), false (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        this.lastDbStatus = null;
        this.lastScrapingCheck = null;
        this.monitoringInterval = null;
        this.serverStartTime = null; // –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞
        this.botStartTime = new Date(); // –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    }

    async init() {
        try {
            logger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞...');
            // Lock: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
            if (isProcessLocked('telegram-bot')) {
                logger.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (lock telegram-bot). –í—ã—Ö–æ–¥–∏–º.');
                return;
            }
            if (!createProcessLock('telegram-bot')) {
                logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock –¥–ª—è –±–æ—Ç–∞. –í—ã—Ö–æ–¥–∏–º.');
                return;
            }
            setupProcessLockCleanup('telegram-bot');
            
            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            this.bot = new Telegraf(this.botToken);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            this.mysqlPool = createPool();

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            try {
                await this.mysqlPool.execute('SELECT 1');
                logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
            } catch (dbError) {
                logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î:', dbError.message);
                logger.info('üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª, –ø—Ä–æ—Å—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            setupCommandsModule(this);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await this.bot.launch();
            
            logger.info('‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            await this.sendMessage('üöÄ Telegram –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ç–∏–∫–∞ cron
            logger.info('‚è±Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞');
            await this.sendServerStatus();
            this.lastStatusSentAt = Date.now();

            setupSchedules(this);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç (–≤—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            hmStartMonitoring(this);
            
            logger.info(`üìÖ Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ ${this.statusIntervalHours} —á–∞—Å–æ–≤, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ ${this.dailyReportHour}:00, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${this.monitoringIntervalMinutes} –º–∏–Ω—É—Ç`);

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞:', error);
        }
    }

    setupCommands() { setupCommandsModule(this); }

        async getServerStats() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ API endpoint
            const serverStatus = await this.getServerStatusFromAPI();
            const watchdogStatus = await this.getWatchdogStatusFromAPI();
            const dbConnected = await this.checkDatabaseConnection();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∏–∑ API –≤–º–µ—Å—Ç–æ –ë–î
            const scrapingStats = serverStatus.data && serverStatus.data.stats ? serverStatus.data.stats : null;
            
            return {
                serverRunning: serverStatus.running,
                dbConnected,
                scrapingStats,
                serverStartTime: serverStatus.startTime,
                uptime: serverStatus.uptime,
                serverData: serverStatus.data,
                watchdogStatus: watchdogStatus
            };
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
            return {
                serverRunning: false,
                dbConnected: false,
                scrapingStats: null,
                serverStartTime: null,
                uptime: 0,
                serverData: null,
                watchdogStatus: null
            };
        }
    }

    async getServerStatusFromAPI() { return await apiGetServerStatus(); }

    async getWatchdogStatusFromAPI() { return await apiGetWatchdogStatus(); }



    formatUptime(minutes) { return `${Math.floor(minutes / 60)}—á ${minutes % 60}–º`; }

    formatStatusMessage(stats) { return formatStatusMessageModule(this, stats); }

    async sendServerStatus() { return await rptSendStatus(this); }

    async restartMainServer() {
        return new Promise((resolve) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PM2
            exec('pm2 --version', (pm2Error) => {
                if (pm2Error) {
                    logger.warn('‚ö†Ô∏è PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫');
                    this.sendMessage('‚ö†Ô∏è PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é...');
                    
                    // –ï—Å–ª–∏ PM2 –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ restartLocalServer
                    this.restartLocalServer().then(() => {
                        resolve();
                    });
                    return;
                }
                
                // –ï—Å–ª–∏ PM2 –µ—Å—Ç—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
                exec('pm2 restart winamax-scraper', (error, stdout, stderr) => {
                    if (error) {
                        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ PM2:', error);
                        logger.warn('‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
                        this.sendMessage('‚ùå –û—à–∏–±–∫–∞ PM2, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
                        
                        // –ï—Å–ª–∏ PM2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º restartLocalServer
                        this.restartLocalServer().then(() => {
                            resolve();
                        });
                    } else {
                        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2');
                        this.sendMessage('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2');
                        resolve();
                    }
                });
            });
        });
    }

    async restartLocalServer() { await psRestartLocal((m) => this.sendMessage(m)); }

    async restartWatchdog(ctx) { await psRestartWatchdog(ctx); }

    async getRecentLogs() { /* –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ logs.js –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã */ }

    async sendMessage(message) { await this.bot.telegram.sendMessage(this.chatId, message); }

    startMonitoring() { /* –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ healthMonitor.js */ }

    async checkSystemStatus() { /* –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ healthMonitor.js */ }

    async checkServerRunning() { return await psCheckServerRunning(); }

    async getServerStartTime() { return await psGetServerStartTime(); }

    async checkDatabaseConnection() { return await dbCheckConnection(this.mysqlPool); }

    async checkScrapingErrors() { /* –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ healthMonitor.js */ }

    async sendDailyReport() { return await rptSendDaily(this); }

    async stop() {
        try {
            if (this.monitoringInterval) {
                clearInterval(this.monitoringInterval);
                logger.info('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            if (this.bot) {
                await this.bot.stop();
                logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            if (this.mysqlPool) {
                await this.mysqlPool.end();
                logger.info('üõë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
const monitor = new TelegramMonitor();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', async () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –º–æ–Ω–∏—Ç–æ—Ä...');
    await monitor.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –º–æ–Ω–∏—Ç–æ—Ä...');
    await monitor.stop();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
monitor.init().catch(error => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞:', error);
    process.exit(1);
}); 