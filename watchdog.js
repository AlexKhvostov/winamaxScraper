#!/usr/bin/env node

import { exec, spawn } from 'child_process';
import { logger } from './src/utils/logger.js';
import fetch from 'node-fetch';
import express from 'express';

class ServerWatchdog {
    constructor() {
        this.serverUrl = process.env.WATCHDOG_SERVER_URL || 'http://localhost:3000/api/status';
        this.checkInterval = 180000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
        this.debugMode = true;
        this.maxRestarts = 5; // –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å
        this.restartWindow = 3600000; // –û–∫–Ω–æ –≤ 1 —á–∞—Å
        this.isRunning = false;
        this.restartCount = 0;
        this.lastRestartTime = null;
        this.lastCheckTime = null;
        this.lastServerStatus = null;
        
        // Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        this.app = express();
        this.statusPort = 3001;
        this.setupStatusServer();
    }

    setupStatusServer() {
        // Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ watchdog
        this.app.get('/api/status', (req, res) => {
            const status = {
                status: 'running',
                service: 'Server Watchdog',
                time: new Date().toISOString(),
                milanTime: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Rome' }),
                isRunning: this.isRunning,
                lastCheckTime: this.lastCheckTime,
                lastServerStatus: this.lastServerStatus,
                restartCount: this.restartCount,
                lastRestartTime: this.lastRestartTime,
                checkInterval: this.checkInterval,
                serverUrl: this.serverUrl,
                uptime: process.uptime(),
                memory: process.memoryUsage().heapUsed / 1024 / 1024
            };
            
            res.json(status);
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç—É—Å–∞
        this.app.listen(this.statusPort, () => {
            logger.info(`üìä Watchdog status server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.statusPort}`);
            logger.info(`üîó –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${this.statusPort}/api/status`);
        });
    }

    async start() {
        logger.info('üêï –ó–∞–ø—É—Å–∫ Watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        this.isRunning = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        await this.ensureServerRunning();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.monitorLoop();
        
        // Graceful shutdown
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        
        logger.info('‚úÖ Watchdog –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–µ—Ä–≤–µ—Ä');
        logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ ${this.checkInterval / 1000 / 60} –º–∏–Ω—É—Ç`);
    }

    async stop() {
        logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Watchdog...');
        this.isRunning = false;
        process.exit(0);
    }

    async monitorLoop() {
        if (!this.isRunning) return;

        try {
            await this.checkServerStatus();
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
        }

        setTimeout(() => this.monitorLoop(), this.checkInterval);
    }

    async checkServerStatus() {
        try {
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
            this.lastCheckTime = new Date();
            
            const response = await fetch(this.serverUrl, {
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });
            
            if (!response.ok) {
                logger.warn(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP ${response.status})`);
                this.lastServerStatus = false;
                await this.restartServer();
                return;
            }
            
            const data = await response.json();
            
            if (data.status !== 'running') {
                logger.warn(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${data.status})`);
                this.lastServerStatus = false;
                await this.restartServer();
                return;
            }
            
            this.lastServerStatus = true;
            logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
        } catch (error) {
            logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
            this.lastServerStatus = false;
            await this.restartServer();
        }
    }

    async ensureServerRunning() {
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...');
        
        try {
            const response = await fetch(this.serverUrl, {
                timeout: 5000
            });
            
            if (!response.ok) {
                logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
                await this.startServer();
            } else {
                const data = await response.json();
                if (data.status !== 'running') {
                    logger.info('üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å)...');
                    await this.startServer();
                } else {
                    logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                }
            }
        } catch (error) {
            logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)...');
            await this.startServer();
        }
    }

    async startServer() {
        try {
            const childProcess = spawn('node', ['server.js'], {
                detached: true,
                stdio: 'ignore'
            });
            
            childProcess.unref();
            
            logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: ${childProcess.pid})`);
            
            // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            await new Promise(resolve => setTimeout(resolve, 5000));
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        }
    }

    async restartServer() {
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        if (this.restartCount >= this.maxRestarts) {
            const timeSinceFirstRestart = now - (this.lastRestartTime || 0);
            if (timeSinceFirstRestart < this.restartWindow) {
                logger.error(`üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${this.maxRestarts} –∑–∞ —á–∞—Å)`);
                logger.error('üõë Watchdog –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞');
                return;
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å
                this.restartCount = 0;
            }
        }

        logger.info('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        await this.killServer();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
        await this.startServer();
        
        this.restartCount++;
        this.lastRestartTime = now;
        
        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
    }

    async killServer() {
        return new Promise((resolve) => {
            if (process.platform === 'win32') {
                // 1) –ü—ã—Ç–∞–µ–º—Å—è —É–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –≥–¥–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å server.js
                const findByCmd = `wmic process where "commandline like '%server.js%'" get processid`;
                exec(findByCmd, (_e1, out1) => {
                    const pids = (out1 || '')
                        .split('\n')
                        .map(s => s.trim())
                        .filter(s => /^\d+$/.test(s));
                    const killAll = (list, done) => {
                        if (list.length === 0) return done();
                        const pid = list.shift();
                        exec(`taskkill /F /PID ${pid}`, () => killAll(list, done));
                    };
                    killAll([...pids], () => {
                        // 2) –ù–∞ —Å–ª—É—á–∞–π –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –ø–æ—Ä—Ç 3000
                        exec(`netstat -ano | findstr :3000`, (_e2, out2) => {
                            const listenLine = (out2 || '').split('\n').find(l => /LISTENING\s+\d+/.test(l));
                            const m = listenLine ? listenLine.match(/LISTENING\s+(\d+)/) : null;
                            const pidOnPort = m ? m[1] : null;
                            if (pidOnPort) {
                                exec(`taskkill /F /PID ${pidOnPort}`, () => resolve());
                            } else {
                                resolve();
                            }
                        });
                    });
                });
            } else {
                // Linux/Mac
                exec(`pkill -f "node server.js"`, () => resolve());
            }
        });
    }

    getStatus() {
        return {
            isRunning: this.isRunning,
            restartCount: this.restartCount,
            lastRestartTime: this.lastRestartTime,
            lastCheckTime: this.lastCheckTime,
            lastServerStatus: this.lastServerStatus,
            checkInterval: this.checkInterval,
            serverUrl: this.serverUrl,
            statusPort: this.statusPort
        };
    }
}

// –ó–∞–ø—É—Å–∫ Watchdog
const watchdog = new ServerWatchdog();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
    case 'start':
        watchdog.start();
        break;
    case 'status':
        console.log('üìä –°—Ç–∞—Ç—É—Å Watchdog:');
        console.log(watchdog.getStatus());
        break;
    default:
        console.log(`
üêï Server Watchdog –¥–ª—è Winamax Scraper

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node watchdog.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å Watchdog –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å

–ü—Ä–∏–º–µ—Ä—ã:
  node watchdog.js start
  node watchdog.js status

–§—É–Ω–∫—Ü–∏–∏ Watchdog:
  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ API endpoint
  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
  üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å 5 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤/—á–∞—Å)
  üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  üåê Status API –Ω–∞ –ø–æ—Ä—Ç—É 3001
        `);
        process.exit(0);
} 