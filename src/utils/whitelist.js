import fs from 'fs';
import path from 'path';
import { logger } from './logger.js';

const WHITELIST_FILE = 'whitelist.txt';

/**
 * –ß–∏—Ç–∞–µ—Ç whitelist –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {Array} –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
 */
export function loadWhitelist() {
    try {
        if (!fs.existsSync(WHITELIST_FILE)) {
            logger.info('–§–∞–π–ª whitelist.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π');
            createEmptyWhitelist();
            return [];
        }

        const content = fs.readFileSync(WHITELIST_FILE, 'utf8');
        const lines = content.split('\n');
        
        const players = lines
            .map(line => line.trim())
            .filter(line => line && !line.startsWith('#'))
            .filter(line => line.length > 0);

        logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω whitelist: ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
        return players;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è whitelist:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ whitelist
 * @returns {boolean}
 */
export function isWhitelistActive() {
    const players = loadWhitelist();
    return players.length > 0;
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ whitelist
 * @param {Array} players - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
export function filterByWhitelist(players) {
    const whitelist = loadWhitelist();
    
    if (whitelist.length === 0) {
        return {
            filtered: players,
            whitelistActive: false,
            found: players.length,
            total: players.length,
            missing: []
        };
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ whitelist
    const filtered = players.filter(player => 
        whitelist.some(whitelistName => 
            player.name.toLowerCase().includes(whitelistName.toLowerCase()) ||
            whitelistName.toLowerCase().includes(player.name.toLowerCase())
        )
    );

    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ whitelist, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const foundNames = filtered.map(p => p.name.toLowerCase());
    const missing = whitelist.filter(whitelistName => 
        !foundNames.some(foundName => 
            foundName.includes(whitelistName.toLowerCase()) ||
            whitelistName.toLowerCase().includes(foundName)
        )
    );

    return {
        filtered,
        whitelistActive: true,
        found: filtered.length,
        total: whitelist.length,
        missing
    };
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ whitelist
 * @param {string} playerName 
 */
export function addToWhitelist(playerName) {
    try {
        const whitelist = loadWhitelist();
        
        if (whitelist.includes(playerName)) {
            logger.warn(`–ò–≥—Ä–æ–∫ ${playerName} —É–∂–µ –≤ whitelist`);
            return false;
        }

        whitelist.push(playerName);
        saveWhitelist(whitelist);
        logger.info(`–ò–≥—Ä–æ–∫ ${playerName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist`);
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist:', error);
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ whitelist
 * @param {string} playerName 
 */
export function removeFromWhitelist(playerName) {
    try {
        const whitelist = loadWhitelist();
        const index = whitelist.indexOf(playerName);
        
        if (index === -1) {
            logger.warn(`–ò–≥—Ä–æ–∫ ${playerName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ whitelist`);
            return false;
        }

        whitelist.splice(index, 1);
        saveWhitelist(whitelist);
        logger.info(`–ò–≥—Ä–æ–∫ ${playerName} —É–¥–∞–ª–µ–Ω –∏–∑ whitelist`);
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist:', error);
        return false;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç whitelist
 */
export function clearWhitelist() {
    try {
        saveWhitelist([]);
        logger.info('Whitelist –æ—á–∏—â–µ–Ω');
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ whitelist:', error);
        return false;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç whitelist –≤ —Ñ–∞–π–ª
 * @param {Array} players 
 */
function saveWhitelist(players) {
    const header = [
        '# Whitelist –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        '# –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫—É',
        '# –°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '# –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '',
        '# –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –í–°–ï –∏–≥—Ä–æ–∫–∏',
        '# –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ - —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –æ–Ω–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)',
        ''
    ];

    const content = header.concat(players).join('\n');
    fs.writeFileSync(WHITELIST_FILE, content, 'utf8');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π whitelist —Ñ–∞–π–ª
 */
function createEmptyWhitelist() {
    const content = [
        '# Whitelist –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        '# –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫—É',
        '# –°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '# –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '',
        '# –ü—Ä–∏–º–µ—Ä—ã –∏–≥—Ä–æ–∫–æ–≤ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã—Ö):',
        '# La Magie',
        '# NiclsRobert',
        '# 5.8 BB',
        '# Jas0n_B0urne',
        '# IWLKN',
        '',
        '# –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –í–°–ï –∏–≥—Ä–æ–∫–∏',
        '# –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ - —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –æ–Ω–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)'
    ].join('\n');

    fs.writeFileSync(WHITELIST_FILE, content, 'utf8');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å whitelist
 */
export function printWhitelistStatus() {
    const whitelist = loadWhitelist();
    
    console.log('\nüë• –°–¢–ê–¢–£–° WHITELIST:');
    console.log('===================');
    
    if (whitelist.length === 0) {
        console.log('üìä –†–µ–∂–∏–º: –°–ë–û–† –í–°–ï–• –ò–ì–†–û–ö–û–í');
        console.log('üìÑ –§–∞–π–ª: whitelist.txt (–ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—Å–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
        console.log('üí° –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å whitelist, –¥–æ–±–∞–≤—å—Ç–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª');
    } else {
        console.log('üéØ –†–µ–∂–∏–º: WHITELIST –ê–ö–¢–ò–í–ï–ù');
        console.log(`üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: ${whitelist.length} –∏–≥—Ä–æ–∫–æ–≤`);
        console.log('üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:');
        whitelist.forEach((player, index) => {
            console.log(`   ${index + 1}. ${player}`);
        });
    }
    
    console.log('\nüìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   npm start whitelist              - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
    console.log('   npm start whitelist add "Name"   - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞');
    console.log('   npm start whitelist remove "Name" - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞');
    console.log('   npm start whitelist clear        - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫');
    console.log('   –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª whitelist.txt –≤—Ä—É—á–Ω—É—é\n');
} 