import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { logger } from './logger.js';
import { EXPRESSO_LIMITS } from '../config/limits.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const LIMITS_FILE = path.join(__dirname, '..', '..', 'limits.txt');

/**
 * –ß–∏—Ç–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {Array} –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –ª–∏–º–∏—Ç–æ–≤
 */
export function loadLimitsFromFile() {
    try {
        if (!fs.existsSync(LIMITS_FILE)) {
            logger.info('–§–∞–π–ª limits.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
            createLimitsFile();
            return [];
        }

        const content = fs.readFileSync(LIMITS_FILE, 'utf8');
        const lines = content.split('\n');
        
        const limits = lines
            .map(line => line.trim())
            .filter(line => line && !line.startsWith('#'))
            .filter(line => line.length > 0)
            .filter(line => EXPRESSO_LIMITS[line]); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: ${limits.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
        return limits;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è limits.txt:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –ª–∏–º–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {boolean}
 */
export function isLimitsFileActive() {
    const limits = loadLimitsFromFile();
    return limits.length > 0;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑ .env)
 * @returns {Array} –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–∏–º–∏—Ç–æ–≤
 */
export function getActiveLimitsFromFile() {
    const limitsFromFile = loadLimitsFromFile();
    
    if (limitsFromFile.length === 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        const envLimits = (process.env.ACTIVE_LIMITS || '100').split(',').map(l => l.trim());
        logger.info('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏–º–∏—Ç—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
        
        return envLimits
            .filter(limit => EXPRESSO_LIMITS[limit])
            .map(limit => ({
                limit,
                name: EXPRESSO_LIMITS[limit].name,
                url: EXPRESSO_LIMITS[limit].url,
                description: EXPRESSO_LIMITS[limit].description,
                source: 'env'
            }));
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
    return limitsFromFile.map(limit => ({
        limit,
        name: EXPRESSO_LIMITS[limit].name,
        url: EXPRESSO_LIMITS[limit].url,
        description: EXPRESSO_LIMITS[limit].description,
        source: 'file'
    }));
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç –≤ —Ñ–∞–π–ª (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç)
 * @param {string} limitCode 
 */
export function addLimitToFile(limitCode) {
    try {
        if (!EXPRESSO_LIMITS[limitCode]) {
            logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–∏–º–∏—Ç: ${limitCode}`);
            return false;
        }

        const content = fs.readFileSync(LIMITS_FILE, 'utf8');
        const lines = content.split('\n');
        
        // –ò—â–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –ª–∏–º–∏—Ç–æ–º
        let found = false;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            if (line === `# ${limitCode}`) {
                lines[i] = limitCode; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
                found = true;
                break;
            }
        }

        if (!found) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            const insertIndex = lines.findIndex(line => 
                line.includes('–ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã')
            );
            
            if (insertIndex > 0) {
                lines.splice(insertIndex - 1, 0, limitCode);
            } else {
                lines.push(limitCode);
            }
        }

        fs.writeFileSync(LIMITS_FILE, lines.join('\n'), 'utf8');
        logger.info(`–õ–∏–º–∏—Ç ${limitCode} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª–µ`);
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤ —Ñ–∞–π–ª:', error);
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ª–∏–º–∏—Ç –∏–∑ —Ñ–∞–π–ª–∞ (–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç)
 * @param {string} limitCode 
 */
export function removeLimitFromFile(limitCode) {
    try {
        const content = fs.readFileSync(LIMITS_FILE, 'utf8');
        const lines = content.split('\n');
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –ª–∏–º–∏—Ç–æ–º
        let found = false;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            if (line === limitCode) {
                lines[i] = `# ${limitCode}`; // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
                found = true;
                break;
            }
        }

        if (found) {
            fs.writeFileSync(LIMITS_FILE, lines.join('\n'), 'utf8');
            logger.info(`–õ–∏–º–∏—Ç ${limitCode} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª–µ`);
            return true;
        } else {
            logger.warn(`–õ–∏–º–∏—Ç ${limitCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
            return false;
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', error);
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–∏–º–∏—Ç–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
function createLimitsFile() {
    const currentActiveLimits = (process.env.ACTIVE_LIMITS || '100').split(',').map(l => l.trim());
    
    const content = [
        '# –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ Expresso',
        '# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ',
        '# –°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '# –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        '',
        '# –ú–∏–∫—Ä–æ–ª–∏–º–∏—Ç—ã',
        currentActiveLimits.includes('0.25') ? '0.25' : '# 0.25',
        currentActiveLimits.includes('0.5') ? '0.5' : '# 0.5',
        '',
        '# –ù–∏–∑–∫–∏–µ –ª–∏–º–∏—Ç—ã',
        currentActiveLimits.includes('1-1.5') ? '1-1.5' : '# 1-1.5',
        currentActiveLimits.includes('2-3') ? '2-3' : '# 2-3',
        '',
        '# –°—Ä–µ–¥–Ω–∏–µ –ª–∏–º–∏—Ç—ã',
        currentActiveLimits.includes('4-7') ? '4-7' : '# 4-7',
        currentActiveLimits.includes('8-15') ? '8-15' : '# 8-15',
        '',
        '# –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã',
        currentActiveLimits.includes('16-25') ? '16-25' : '# 16-25',
        currentActiveLimits.includes('50') ? '50' : '# 50',
        currentActiveLimits.includes('100') ? '100' : '# 100',
        '',
        '# –ü—Ä–µ–º–∏—É–º –ª–∏–º–∏—Ç—ã',
        currentActiveLimits.includes('250') ? '250' : '# 250',
        currentActiveLimits.includes('500') ? '500' : '# 500',
        '',
        '# –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ .env —Ñ–∞–π–ª–∞',
        `# –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏–∑ .env: ${currentActiveLimits.join(', ')}`
    ];

    fs.writeFileSync(LIMITS_FILE, content.join('\n'), 'utf8');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤
 */
export function printLimitsFileStatus() {
    const activeLimits = getActiveLimitsFromFile();
    const allLimits = Object.keys(EXPRESSO_LIMITS);
    
    console.log('\nüéØ –°–¢–ê–¢–£–° –õ–ò–ú–ò–¢–û–í:');
    console.log('==================');
    
    if (activeLimits.length === 0) {
        console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤');
        return;
    }

    const source = activeLimits[0].source;
    if (source === 'file') {
        console.log('üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: limits.txt');
    } else {
        console.log('üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: .env —Ñ–∞–π–ª (limits.txt –ø—É—Å—Ç–æ–π)');
    }
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω–æ: ${activeLimits.length} –∏–∑ ${allLimits.length} –ª–∏–º–∏—Ç–æ–≤`);
    console.log('\n‚úÖ –ê–ö–¢–ò–í–ù–´–ï –õ–ò–ú–ò–¢–´:');
    
    activeLimits.forEach((limitInfo, index) => {
        console.log(`   ${index + 1}. ${limitInfo.name} - ${limitInfo.description}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    const activeCodes = activeLimits.map(l => l.limit);
    const inactiveLimits = allLimits.filter(code => !activeCodes.includes(code));
    
    if (inactiveLimits.length > 0) {
        console.log('\n‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–ï –õ–ò–ú–ò–¢–´:');
        inactiveLimits.forEach(code => {
            const limitInfo = EXPRESSO_LIMITS[code];
            console.log(`   ‚Ä¢ ${limitInfo.name} - ${limitInfo.description}`);
        });
    }
    
    console.log('\nüìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   npm start limits-file              - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
    console.log('   npm start limits-file add "50"     - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç');
    console.log('   npm start limits-file remove "50"  - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç');
    console.log('   –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª limits.txt –≤—Ä—É—á–Ω—É—é\n');
} 