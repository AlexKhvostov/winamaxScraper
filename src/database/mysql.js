import mysql from 'mysql2/promise';
import { config } from '../config/config.js';
import { logger } from '../utils/logger.js';
import { getMilanDateOnly, getMilanDateTime } from '../utils/timezone.js';

class MySQLService {
    constructor() {
        this.connection = null;
        this.pool = null;
    }

    async connect() {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.pool = mysql.createPool({
                host: config.database.host,
                port: config.database.port,
                user: config.database.username,
                password: config.database.password,
                database: config.database.database,
                waitForConnections: true,
                connectionLimit: 10,
                queueLimit: 0,
                idleTimeout: 60000,
                acquireTimeout: 60000,
                multipleStatements: true
            });

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const connection = await this.pool.getConnection();
            await connection.ping();
            connection.release();
            
            logger.info('MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:', error);
            return false;
        }
    }

    async initDatabase() {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const tempPool = mysql.createPool({
                host: config.database.host,
                port: config.database.port,
                user: config.database.username,
                password: config.database.password,
                multipleStatements: true
            });

            const connection = await tempPool.getConnection();
            await connection.execute(`CREATE DATABASE IF NOT EXISTS ${config.database.database} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);
            connection.release();
            await tempPool.end();
            
            logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ —Å —Ç–µ–º–∏ –∂–µ –æ—á–∫–∞–º–∏ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–∏–ª–∞–Ω–∞)
     * @param {string} playerName - –∏–º—è –∏–≥—Ä–æ–∫–∞
     * @param {string} tournamentLimit - –ª–∏–º–∏—Ç —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} points - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
     * @param {Date} date - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    async checkDuplicateRecord(playerName, tournamentLimit, points, date) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–∏–ª–∞–Ω–∞
            const milanDate = getMilanDateOnly(date);
            
            const query = `
                SELECT COUNT(*) as count
                FROM tournament_snapshots 
                WHERE player_name = ?
                  AND tournament_limit = ?
                  AND points = ?
                  AND scraped_date_milan = ?
                LIMIT 1
            `;
            
            const [rows] = await this.pool.execute(query, [playerName, tournamentLimit, points, milanDate]);
            const isDuplicate = rows[0].count > 0;
            
            if (isDuplicate) {
                logger.debug(`–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${playerName} (${points} –æ—á–∫–æ–≤, ${milanDate})`);
            }
            
            return isDuplicate;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞:', error);
            return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
        }
    }

    async insertTournamentSnapshot(data) {
        try {
            if (!Array.isArray(data) || data.length === 0) {
                logger.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
                return false;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ INSERT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            let insertedCount = 0;
            let duplicatesCount = 0;
            let errorsCount = 0;
            
            for (const row of data) {
                try {
                    const scrapedAt = row.scraped_at || new Date();
                    const milanDate = getMilanDateOnly(scrapedAt);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                    const checkDuplicates = process.env.CHECK_DUPLICATES === 'true';
                    
                    if (checkDuplicates) {
                        const isDuplicate = await this.checkDuplicateRecord(
                            row.player_name,
                            row.tournament_limit,
                            row.points,
                            scrapedAt
                        );
                        
                        if (isDuplicate) {
                            duplicatesCount++;
                            logger.debug(`–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${row.player_name} (${row.points} –æ—á–∫–æ–≤, ${milanDate})`);
                            continue;
                        }
                    }
                    
                    const query = `
                        INSERT INTO tournament_snapshots 
                        (tournament_limit, rank, player_name, points, guarantee, scraped_at, scraped_date_milan) 
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    `;
                    
                    const values = [
                        row.tournament_limit,
                        row.rank,
                        row.player_name,
                        row.points,
                        row.guarantee,
                        scrapedAt,
                        milanDate
                    ];

                    await this.pool.execute(query, values);
                    insertedCount++;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –ª–∏–º–∏—Ç–∞
                    if (insertedCount === 1) {
                        const dbWriteTimeUTC = new Date().toISOString();
                        logger.info(`üíæ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î (UTC): ${dbWriteTimeUTC} –¥–ª—è –ª–∏–º–∏—Ç–∞ ${row.tournament_limit}`);
                    }
                } catch (rowError) {
                    errorsCount++;
                    logger.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ ${row.player_name || 'unknown'}:`, rowError.message);
                    logger.error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', JSON.stringify(row, null, 2));
                }
            }
            
            const totalRecords = data.length;
            
            const processingEndTimeUTC = new Date().toISOString();
            logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª–∏–º–∏—Ç–∞ ${data[0]?.tournament_limit}:`);
            logger.info(`  ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: ${insertedCount}`);
            logger.info(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesCount}`);
            logger.info(`  ‚ùå –û—à–∏–±–æ–∫: ${errorsCount}`);
            logger.info(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î (UTC): ${processingEndTimeUTC}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            await this.updateScrapingMetadata(data[0]?.tournament_limit, true);
            
            return {
                success: insertedCount > 0,
                insertedCount: insertedCount,
                duplicatesCount: duplicatesCount,
                errorsCount: errorsCount,
                totalRecords: totalRecords
            };
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MySQL:', error);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
            if (data[0]?.tournament_limit) {
                await this.updateScrapingMetadata(data[0].tournament_limit, false, error.message);
            }
            
            return {
                success: false,
                insertedCount: 0,
                duplicatesCount: 0,
                errorsCount: data.length,
                totalRecords: data.length,
                error: error.message
            };
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ scraped_date_milan –≤ —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
     */
    async addMilanDateColumn() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ
            const checkQuery = `
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = 'tournament_snapshots' 
                AND COLUMN_NAME = 'scraped_date_milan'
            `;
            
            const [columns] = await this.pool.execute(checkQuery);
            
            if (columns.length === 0) {
                // –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                const query = `
                    ALTER TABLE tournament_snapshots 
                    ADD COLUMN scraped_date_milan DATE 
                    COMMENT '–î–∞—Ç–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–∏–ª–∞–Ω–∞'
                `;
                
                await this.pool.execute(query);
                logger.info('–ü–æ–ª–µ scraped_date_milan –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É');
                
                // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                const indexQuery = `
                    CREATE INDEX idx_duplicates_milan 
                    ON tournament_snapshots (player_name, tournament_limit, points, scraped_date_milan)
                `;
                
                await this.pool.execute(indexQuery);
                logger.info('–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                const updateQuery = `
                    UPDATE tournament_snapshots 
                    SET scraped_date_milan = DATE(CONVERT_TZ(scraped_at, '+00:00', '+01:00'))
                    WHERE scraped_date_milan IS NULL
                `;
                
                await this.pool.execute(updateQuery);
                logger.info('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } else {
                logger.info('–ü–æ–ª–µ scraped_date_milan —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è scraped_date_milan:', error);
        }
    }

    async updateScrapingMetadata(tournamentLimit, success, errorMessage = null) {
        try {
            if (success) {
                await this.pool.execute(`
                    UPDATE scraping_metadata 
                    SET last_successful_scrape = NOW(), 
                        total_scrapes = total_scrapes + 1,
                        error_count = 0,
                        last_error_message = NULL,
                        last_error_time = NULL
                    WHERE tournament_limit = ?
                `, [tournamentLimit]);
            } else {
                await this.pool.execute(`
                    UPDATE scraping_metadata 
                    SET error_count = error_count + 1,
                        last_error_message = ?,
                        last_error_time = NOW()
                    WHERE tournament_limit = ?
                `, [errorMessage, tournamentLimit]);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    async getPlayerData(playerName, tournamentLimit, hoursBack = 2) {
        try {
            const query = `
                SELECT 
                    player_name,
                    tournament_limit,
                    scraped_at as created_at,
                    points,
                    rank
                FROM tournament_snapshots 
                WHERE player_name = ?
                  AND tournament_limit = ?
                  AND scraped_at > DATE_SUB(NOW(), INTERVAL ? HOUR)
                ORDER BY scraped_at DESC
                LIMIT 20
            `;

            const [rows] = await this.pool.execute(query, [playerName, tournamentLimit, hoursBack]);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
            return [];
        }
    }

    async getPlayerVelocity(playerName, tournamentLimit, hoursBack = 2) {
        try {
            const query = `
                SELECT 
                    player_name,
                    tournament_limit,
                    scraped_at,
                    points,
                    rank,
                    LAG(points) OVER (PARTITION BY player_name, tournament_limit ORDER BY scraped_at) as prev_points,
                    LAG(scraped_at) OVER (PARTITION BY player_name, tournament_limit ORDER BY scraped_at) as prev_time,
                    LAG(rank) OVER (PARTITION BY player_name, tournament_limit ORDER BY scraped_at) as prev_rank
                FROM tournament_snapshots 
                WHERE player_name = ?
                  AND tournament_limit = ?
                  AND scraped_at > DATE_SUB(NOW(), INTERVAL ? HOUR)
                ORDER BY scraped_at DESC
                LIMIT 20
            `;

            const [rows] = await this.pool.execute(query, [playerName, tournamentLimit, hoursBack]);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞:', error);
            return [];
        }
    }

    async getTopFastPlayers(tournamentLimit, limit = 10) {
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è MySQL (–±–µ–∑ CTE)
            const query = `
                SELECT 
                    t1.player_name,
                    AVG(
                        CASE 
                            WHEN t2.points IS NOT NULL AND t2.scraped_at IS NOT NULL 
                            THEN (t1.points - t2.points) / (TIMESTAMPDIFF(MINUTE, t2.scraped_at, t1.scraped_at) + 1)
                            ELSE 0 
                        END
                    ) as avg_velocity,
                    MAX(t1.points) as current_points,
                    MIN(t1.rank) as best_rank
                FROM tournament_snapshots t1
                LEFT JOIN tournament_snapshots t2 ON 
                    t1.player_name = t2.player_name 
                    AND t1.tournament_limit = t2.tournament_limit
                    AND t2.scraped_at < t1.scraped_at
                    AND t2.scraped_at = (
                        SELECT MAX(t3.scraped_at) 
                        FROM tournament_snapshots t3 
                        WHERE t3.player_name = t1.player_name 
                          AND t3.tournament_limit = t1.tournament_limit 
                          AND t3.scraped_at < t1.scraped_at
                    )
                WHERE t1.tournament_limit = ?
                  AND t1.scraped_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
                  AND t2.points IS NOT NULL
                GROUP BY t1.player_name
                HAVING avg_velocity > 0
                ORDER BY avg_velocity DESC
                LIMIT ?
            `;

            const [rows] = await this.pool.execute(query, [tournamentLimit, limit]);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
            return [];
        }
    }

    async getPlayerStats(playerName, tournamentLimit, daysBack = 7) {
        try {
            const query = `
                SELECT 
                    date,
                    first_seen,
                    last_seen,
                    min_rank,
                    max_rank,
                    min_points,
                    max_points,
                    points_gained,
                    sessions_count,
                    avg_rank,
                    rank_changes
                FROM player_stats
                WHERE player_name = ?
                  AND tournament_limit = ?
                  AND date >= DATE_SUB(CURDATE(), INTERVAL ? DAY)
                ORDER BY date DESC
            `;

            const [rows] = await this.pool.execute(query, [playerName, tournamentLimit, daysBack]);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
            return [];
        }
    }

    async getTopActivePlayers(tournamentLimit, daysBack = 7, limit = 20) {
        try {
            const query = `
                SELECT 
                    player_name,
                    COUNT(*) as total_appearances,
                    AVG(points) as avg_points,
                    MAX(points) as max_points,
                    MIN(rank) as best_rank,
                    AVG(rank) as avg_rank,
                    COUNT(DISTINCT DATE(scraped_at)) as active_days,
                    MAX(scraped_at) as last_seen
                FROM tournament_snapshots
                WHERE tournament_limit = ?
                  AND scraped_at >= DATE_SUB(NOW(), INTERVAL ? DAY)
                GROUP BY player_name
                HAVING total_appearances >= 10
                ORDER BY total_appearances DESC, avg_points DESC
                LIMIT ?
            `;

            const [rows] = await this.pool.execute(query, [tournamentLimit, daysBack, limit]);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
            return [];
        }
    }

    async executeQuery(query, params = []) {
        try {
            const [rows] = await this.pool.execute(query, params);
            return rows;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }

    async ping() {
        try {
            const connection = await this.pool.getConnection();
            await connection.ping();
            connection.release();
            return true;
        } catch (error) {
            return false;
        }
    }

    async getVersion() {
        try {
            const [rows] = await this.pool.execute('SELECT VERSION() as version');
            return rows[0].version;
        } catch (error) {
            return 'Unknown';
        }
    }

    async getDatabases() {
        try {
            const [rows] = await this.pool.execute('SHOW DATABASES');
            return rows.map(row => ({ name: row.Database }));
        } catch (error) {
            return [];
        }
    }

    async getTables() {
        try {
            const [rows] = await this.pool.execute(`SHOW TABLES FROM ${config.database.database}`);
            const tableKey = `Tables_in_${config.database.database}`;
            return rows.map(row => ({ name: row[tableKey] }));
        } catch (error) {
            return [];
        }
    }

    async close() {
        if (this.pool) {
            await this.pool.end();
            logger.info('MySQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

export const mysqlService = new MySQLService();
export { MySQLService }; 