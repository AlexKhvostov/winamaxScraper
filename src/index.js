#!/usr/bin/env node

import dotenv from 'dotenv';
import { WinamaxScraper } from './scrapers/winamaxScraper.js';
import { MySQLService } from './database/mysql.js';
import { logger } from './utils/logger.js';
import { 
    getActiveLimitsFromFile, 
    isLimitsFileActive, 
    addLimitToFile, 
    removeLimitFromFile, 
    printLimitsFileStatus 
} from './utils/limitsFile.js';
import { 
    addToWhitelist, 
    removeFromWhitelist, 
    clearWhitelist, 
    printWhitelistStatus 
} from './utils/whitelist.js';
import { getTimezoneInfo } from './utils/timezone.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function main() {
    const args = process.argv.slice(2);
    const command = args[0];
    const arg1 = args[1];
    const arg2 = args[2];

    try {
        switch (command) {
            case 'test':
                await testScraping();
                break;
            case 'timezone-info':
                await showTimezoneInfo();
                break;
            case 'limits-file':
                await manageLimitsFile(arg1, arg2);
                break;
            case 'whitelist':
                await manageWhitelist(arg1, arg2);
                break;
            case 'points-filter':
                await managePointsFilter(arg1);
                break;
            case 'duplicate-check':
                await handleDuplicateCheck(arg1);
                break;
            case 'scraping-logs':
                await manageScrapingLogs(arg1, arg2);
                break;
            default:
                console.log('ü§ñ Winamax Scraper - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('  npm run test                         - –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö');
                console.log('  npm run timezone-info                - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ');
                console.log('  npm run limits                       - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏');
                console.log('  npm run whitelist                    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ whitelist');
                console.log('  npm run points-filter [value]        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º –æ—á–∫–æ–≤');
                console.log('  npm run duplicate-check [on/off]     - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
                console.log('  npm run logs                         - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞');
                break;
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
        process.exit(1);
    }
}

async function showTimezoneInfo() {
    console.log('\nüåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ:');
    console.log('‚îÄ'.repeat(50));
    
    const timezoneInfo = getTimezoneInfo();
    
    console.log(`–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezoneInfo.timezone}`);
    console.log(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–∏–ª–∞–Ω): ${timezoneInfo.currentTime}`);
    console.log(`–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–ú–∏–ª–∞–Ω): ${timezoneInfo.currentDate}`);
    console.log(`–ë–ª–∏–∑–∫–æ –∫ –ø–æ–ª—É–Ω–æ—á–∏: ${timezoneInfo.isNearMidnight ? '‚ö†Ô∏è –î–ê' : '‚úÖ –ù–ï–¢'}`);
    console.log(`UTC —Å–º–µ—â–µ–Ω–∏–µ: ${timezoneInfo.utcOffset} –º–∏–Ω—É—Ç`);
    
    console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log(`TIMEZONE: ${process.env.TIMEZONE || 'Europe/Rome (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
    console.log(`HANDLE_MIDNIGHT_RESET: ${process.env.HANDLE_MIDNIGHT_RESET || 'true (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
    console.log(`CHECK_DUPLICATES: ${process.env.CHECK_DUPLICATES || 'true (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
    console.log(`PREVENT_PARALLEL_RUNS: ${process.env.PREVENT_PARALLEL_RUNS || 'true (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
    
    if (timezoneInfo.isNearMidnight) {
        console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–ª–∏–∑–∫–æ –∫ –ø–æ–ª—É–Ω–æ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–∏–ª–∞–Ω–∞!');
        console.log('   –í –ø–æ–ª–Ω–æ—á—å —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –æ—á–∫–∏.');
        console.log('   –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á—Ç–µ—Ç —ç—Ç–æ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö.');
    }
}

async function testScraping() {
    const startTimeUTC = new Date().toISOString();
    logger.info('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö');
    logger.info(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (UTC): ${startTimeUTC}`);
    
    try {
        const scraper = new WinamaxScraper();
        const database = new MySQLService();
        
        await scraper.initialize();
        await database.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        const limitsConfig = scraper.getActiveLimitsConfig();
        const activeLimits = Object.keys(limitsConfig).filter(limit => limitsConfig[limit].active);
        
        if (activeLimits.length === 0) {
            logger.warn('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞');
            return;
        }
        
        logger.info(`üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${activeLimits.length} –ª–∏–º–∏—Ç–æ–≤: ${activeLimits.join(', ')}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ scraped_date_milan –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await database.addMilanDateColumn();
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const scrapingResult = await scraper.scrapeAllLimits(limitsConfig);
        const { players: playersData, scrapingResults } = scrapingResult;
        
        if (playersData.length === 0) {
            logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–º–∏—Ç–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const dataByLimit = {};
        playersData.forEach(player => {
            if (!dataByLimit[player.limit]) {
                dataByLimit[player.limit] = [];
            }
            dataByLimit[player.limit].push({
                tournament_limit: player.limit,
                rank: player.rank,
                player_name: player.name,
                points: player.points,
                guarantee: player.guarantee,
                scraped_at: player.scraped_at || new Date()
            });
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏–º–∏—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        const dbResults = {};
        let totalInserted = 0;
        
        for (const [limitName, limitData] of Object.entries(dataByLimit)) {
            try {
                const result = await database.insertTournamentSnapshot(limitData);
                dbResults[limitName] = result;
                totalInserted += result.insertedCount;
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ ${limitName}:`, error);
                dbResults[limitName] = {
                    success: false,
                    insertedCount: 0,
                    error: error.message
                };
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        await scraper.logScrapingResults(scrapingResults, dbResults);
        
        if (totalInserted > 0) {
            logger.info(`üéâ –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${totalInserted} –∏–≥—Ä–æ–∫–æ–≤`);
        } else {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
        
        await scraper.close();
        await database.close();
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞:', error);
    }
}

async function manageLimitsFile(action, limitCode) {
    switch (action) {
        case 'add':
            if (!limitCode) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ª–∏–º–∏—Ç–∞: npm run limits add "50"');
                console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏–º–∏—Ç—ã: 0.25, 0.5, 1-1.5, 2-3, 4-7, 8-15, 16-25, 50, 100, 250, 500');
                return;
            }
            const added = addLimitToFile(limitCode);
            if (added) {
                console.log(`‚úÖ –õ–∏–º–∏—Ç "${limitCode}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª–µ`);
                printLimitsFileStatus();
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–∞ "${limitCode}"`);
            }
            break;
            
        case 'remove':
            if (!limitCode) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ª–∏–º–∏—Ç–∞: npm run limits remove "50"');
                return;
            }
            const removed = removeLimitFromFile(limitCode);
            if (removed) {
                console.log(`‚úÖ –õ–∏–º–∏—Ç "${limitCode}" –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª–µ`);
                printLimitsFileStatus();
            } else {
                console.log(`‚ö†Ô∏è  –õ–∏–º–∏—Ç "${limitCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
            }
            break;
            
        default:
            printLimitsFileStatus();
            break;
    }
}

async function manageWhitelist(action, playerName) {
    switch (action) {
        case 'add':
            if (!playerName) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞: npm run whitelist add "PlayerName"');
                return;
            }
            const added = addToWhitelist(playerName);
            if (added) {
                console.log(`‚úÖ –ò–≥—Ä–æ–∫ "${playerName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist`);
                printWhitelistStatus();
            } else {
                console.log(`‚ö†Ô∏è  –ò–≥—Ä–æ–∫ "${playerName}" —É–∂–µ –≤ whitelist –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);
            }
            break;
            
        case 'remove':
            if (!playerName) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞: npm run whitelist remove "PlayerName"');
                return;
            }
            const removed = removeFromWhitelist(playerName);
            if (removed) {
                console.log(`‚úÖ –ò–≥—Ä–æ–∫ "${playerName}" —É–¥–∞–ª–µ–Ω –∏–∑ whitelist`);
                printWhitelistStatus();
            } else {
                console.log(`‚ö†Ô∏è  –ò–≥—Ä–æ–∫ "${playerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ whitelist`);
            }
            break;
            
        case 'clear':
            const cleared = clearWhitelist();
            if (cleared) {
                console.log('‚úÖ Whitelist –æ—á–∏—â–µ–Ω');
                printWhitelistStatus();
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ whitelist');
            }
            break;
            
        default:
            printWhitelistStatus();
            break;
    }
}

async function managePointsFilter(newValue) {
    const fs = await import('fs');
    
    if (!newValue) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const currentValue = process.env.MIN_POINTS_FILTER !== undefined ? parseInt(process.env.MIN_POINTS_FILTER) : 5;
        console.log(`\nüéØ –¢–ï–ö–£–©–ò–ô –§–ò–õ–¨–¢–† –û–ß–ö–û–í: ${currentValue}`);
        console.log('–°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤ –±–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
        console.log('\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run points-filter <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>');
        console.log('–ü—Ä–∏–º–µ—Ä: npm run points-filter 10');
        return;
    }
    
    const value = parseInt(newValue);
    if (isNaN(value) || value < 0) {
        console.log('‚ùå –û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        return;
    }
    
    try {
        // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
        const envPath = '.env';
        let envContent = '';
        
        try {
            envContent = fs.readFileSync(envPath, 'utf8');
        } catch (error) {
            console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º MIN_POINTS_FILTER
        const lines = envContent.split('\n');
        let updated = false;
        
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('MIN_POINTS_FILTER=')) {
                lines[i] = `MIN_POINTS_FILTER=${value}`;
                updated = true;
                break;
            }
        }
        
        if (!updated) {
            lines.push(`MIN_POINTS_FILTER=${value}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(envPath, lines.join('\n'));
        
        console.log(`‚úÖ –§–∏–ª—å—Ç—Ä –æ—á–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${value}`);
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞:', error.message);
    }
}

async function handleDuplicateCheck(action) {
    const fs = await import('fs');
    
    if (!action) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentValue = process.env.CHECK_DUPLICATES;
        const isEnabled = currentValue === 'true';
        
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:');
        console.log(`–°—Ç–∞—Ç—É—Å: ${isEnabled ? '‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' : '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–ê'}`);
        console.log('');
        console.log('–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
        console.log('  üìù –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è: –∏–≥—Ä–æ–∫ + –æ—á–∫–∏ + –¥–µ–Ω—å (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)');
        console.log('  ‚è≠Ô∏è  –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω - –∑–∞–ø–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è');
        console.log('  üíæ –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç - –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
        console.log('');
        console.log('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
        console.log('  npm run duplicate-check on     - –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
        console.log('  npm run duplicate-check off    - –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
        return;
    }
    
    let newValue;
    switch (action.toLowerCase()) {
        case 'on':
        case 'enable':
        case 'true':
            newValue = 'true';
            break;
        case 'off':
        case 'disable':
        case 'false':
            newValue = 'false';
            break;
        default:
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on/off');
            return;
    }
    
    try {
        // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
        const envPath = '.env';
        let envContent = '';
        
        try {
            envContent = fs.readFileSync(envPath, 'utf8');
        } catch (error) {
            console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º CHECK_DUPLICATES
        const lines = envContent.split('\n');
        let updated = false;
        
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('CHECK_DUPLICATES=')) {
                lines[i] = `CHECK_DUPLICATES=${newValue}`;
                updated = true;
                break;
            }
        }
        
        if (!updated) {
            lines.push(`CHECK_DUPLICATES=${newValue}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(envPath, lines.join('\n'));
        
        const isEnabled = newValue === 'true';
        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${isEnabled ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–û–¢–ö–õ–Æ–ß–ï–ù–ê'}`);
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
        if (isEnabled) {
            console.log('');
            console.log('üí° –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏:');
            console.log('   - –ò–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞');
            console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤');
            console.log('   - –î–∞—Ç–æ–π (–±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)');
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
    }
}

async function manageScrapingLogs(subCommand, ...args) {
    const { default: ScrapingLogger } = await import('./database/scrapingLogger.js');
    const scrapingLogger = new ScrapingLogger();
    
    try {
        switch (subCommand) {
            case 'recent':
                const limit = parseInt(args[0]) || 20;
                const recentLogs = await scrapingLogger.getRecentLogs(limit);
                
                console.log(`\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:\n`);
                console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
                console.log('‚îÇ ID  ‚îÇ –î–∞—Ç–∞       ‚îÇ –í—Ä–µ–º—è    ‚îÇ –õ–∏–º–∏—Ç ‚îÇ –ù–∞–π–¥–µ–Ω–æ ‚îÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚îÇ –£—Å–ø–µ—Ö   ‚îÇ –í—Ä–µ–º—è (–º—Å)   ‚îÇ –û—à–∏–±–∫–∞   ‚îÇ');
                console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
                
                recentLogs.forEach(log => {
                    const success = log.database_success ? '‚úÖ' : '‚ùå';
                    const error = log.error_message ? log.error_message.substring(0, 10) + '...' : '-';
                    const execTime = log.execution_time_ms || '-';
                    const scrapingDate = new Date(log.scraping_date).toISOString().split('T')[0];
                    
                    console.log(`‚îÇ ${log.id.toString().padEnd(3)} ‚îÇ ${scrapingDate} ‚îÇ ${log.scraping_time} ‚îÇ ${log.limit_value.padEnd(5)} ‚îÇ ${log.players_found.toString().padEnd(7)} ‚îÇ ${log.players_saved.toString().padEnd(9)} ‚îÇ ${success.padEnd(7)} ‚îÇ ${execTime.toString().padEnd(12)} ‚îÇ ${error.padEnd(8)} ‚îÇ`);
                });
                
                console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
                break;
                
            case 'stats':
                const days = parseInt(args[0]) || 7;
                const limitValue = args[1] || null;
                const stats = await scrapingLogger.getScrapingStats(limitValue, days);
                
                console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π${limitValue ? ` –¥–ª—è –ª–∏–º–∏—Ç–∞ ${limitValue}‚Ç¨` : ''}:\n`);
                
                if (stats.length === 0) {
                    console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
                    break;
                }
                
                console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
                console.log('‚îÇ –î–∞—Ç–∞       ‚îÇ –õ–∏–º–∏—Ç ‚îÇ –ó–∞–ø—É—Å–∫–∏ ‚îÇ –ù–∞–π–¥–µ–Ω–æ ‚îÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚îÇ –£—Å–ø–µ—à–Ω–æ ‚îÇ –û—à–∏–±–∫–∏  ‚îÇ –°—Ä.–≤—Ä–µ–º—è(–º—Å)‚îÇ');
                console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
                
                stats.forEach(stat => {
                    const avgTime = stat.avg_execution_time ? Math.round(stat.avg_execution_time) : '-';
                    const scrapingDate = new Date(stat.scraping_date).toISOString().split('T')[0];
                    console.log(`‚îÇ ${scrapingDate} ‚îÇ ${stat.limit_value.padEnd(5)} ‚îÇ ${stat.total_runs.toString().padEnd(7)} ‚îÇ ${stat.total_players_found.toString().padEnd(7)} ‚îÇ ${stat.total_players_saved.toString().padEnd(9)} ‚îÇ ${stat.successful_runs.toString().padEnd(7)} ‚îÇ ${stat.failed_runs.toString().padEnd(7)} ‚îÇ ${avgTime.toString().padEnd(11)} ‚îÇ`);
                });
                
                console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
                break;
                
            case 'cleanup':
                const cleanupDays = parseInt(args[0]) || 30;
                const deleted = await scrapingLogger.cleanupOldLogs(cleanupDays);
                console.log(`\nüßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: —É–¥–∞–ª–µ–Ω–æ ${deleted} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ ${cleanupDays} –¥–Ω–µ–π`);
                break;
                
            default:
                console.log('\nüìä –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:');
                console.log('  npm run logs recent [limit]     - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)');
                console.log('  npm run logs stats [days] [limit] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π)');
                console.log('  npm run logs cleanup [days]     - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)');
                console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
                console.log('  npm run logs recent 50          - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π');
                console.log('  npm run logs stats 14 100       - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 14 –¥–Ω–µ–π –¥–ª—è –ª–∏–º–∏—Ç–∞ 100‚Ç¨');
                console.log('  npm run logs cleanup 60         - –£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–æ–≥–∞–º–∏:', error.message);
    } finally {
        await scrapingLogger.disconnect();
    }
    
    process.exit(0);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server.js
export async function runFullScraping() {
    const startTimeUTC = new Date().toISOString();
    logger.info(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞ (UTC): ${startTimeUTC}`);
    
    const scraper = new WinamaxScraper();
    const database = new MySQLService();
    
    try {
        await scraper.initialize();
        await database.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        const limitsConfig = scraper.getActiveLimitsConfig();
        const activeLimits = Object.keys(limitsConfig).filter(limit => limitsConfig[limit].active);
        
        if (activeLimits.length === 0) {
            logger.warn('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞');
            return { success: false, error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤' };
        }
        
        logger.info(`üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${activeLimits.length} –ª–∏–º–∏—Ç–æ–≤: ${activeLimits.join(', ')}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ scraped_date_milan –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await database.addMilanDateColumn();
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const scrapingResult = await scraper.scrapeAllLimits(limitsConfig);
        const { players: playersData, scrapingResults } = scrapingResult;
        
        if (playersData.length === 0) {
            logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const dbResults = {};
            activeLimits.forEach(limit => {
                dbResults[limit] = { success: true, insertedCount: 0, duplicatesCount: 0 };
            });
            await scraper.logScrapingResults(scrapingResults, dbResults);
            
            return { success: true, processed: 0, inserted: 0, skipped: 0 };
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–º–∏—Ç–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const dataByLimit = {};
        playersData.forEach(player => {
            if (!dataByLimit[player.limit]) {
                dataByLimit[player.limit] = [];
            }
            dataByLimit[player.limit].push({
                tournament_limit: player.limit,
                rank: player.rank,
                player_name: player.name,
                points: player.points,
                guarantee: player.guarantee,
                scraped_at: player.scraped_at || new Date()
            });
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏–º–∏—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const dbResults = {};
        let totalInserted = 0;
        let totalSkipped = 0;
        
        for (const [limitName, limitData] of Object.entries(dataByLimit)) {
            try {
                const result = await database.insertTournamentSnapshot(limitData);
                dbResults[limitName] = result;
                totalInserted += result.insertedCount;
                totalSkipped += result.duplicatesCount;
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ ${limitName}:`, error);
                dbResults[limitName] = {
                    success: false,
                    insertedCount: 0,
                    duplicatesCount: 0,
                    error: error.message
                };
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        await scraper.logScrapingResults(scrapingResults, dbResults);
        
        return {
            success: true,
            processed: playersData.length,
            inserted: totalInserted,
            skipped: totalSkipped,
            limits: activeLimits
        };
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞:', error);
        return { success: false, error: error.message };
    } finally {
        await scraper.close();
        await database.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º main —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
} 